Devious is a file linker that allows you to version files under Git without directly tracking them.

For a given file versioned through Devious, Git tracks a metadata file containing a reference to the versioned file stored in an accessible location outside of the Git repository. In other words, instead of storing the file itself on Git, directions to the file's location is stored on Git.
This tool is a solution for teams who wish to collaborate without uploading large or sensitive files to Git.

Each metadata file for a versioned file contains a hash of its contents via the blake3 algorithm. This hash represents the path for the copied file in the storage directory.

### High-level Workflows

For a user who makes files accessible:

1.  initialize devious in a Git repository, which sets:

    -   the storage directory from which files are retrieved (outside of the git repo)
    -   the file permissions (optional)
    -   the file group ownership (optional)

2.  add files

    -   this will create a copy of each file in the initialized storage directory

    -   create a contextualizing message for those who will access these files later (optional)

    -   update previously added files by just re-adding

3.  push to Git

    -   this will add the configuration and metadata files automatically generated by Devious to Git, but not the files themselves

For a user who accesses files:

1.  pull from Git

2.  check the status of Devious

    -   this will list all previously added files and whether they are present, absent, or out-dated

3.  get all absent files

    -   this will copy files from the storage directory to the project directory
